#!/usr/bin/env python
# -*- Mode: Python -*-

# Measure round-trip rpc delay between two hosts.

# Usage:
# terminal 1: $ python test_rpc.py --mode server
# terminal 2: $ python test_rpc.py --mode client

import coro
import argparse
from rpcdelay.rpc import Server, Client, RPC_Remote_Exception

from coro.log import NoFacility
LOG = NoFacility()

class DelayRoot:

    def timestamp (self):
        return coro.get_usec()

def measure (proxy, delay=7, nsamples=10):
    samples = []
    while 1:
        coro.sleep_relative (delay)
        t0 = coro.get_usec()
        t1 = proxy.timestamp()
        t2 = coro.get_usec()
        samples.append ((t1-t0, t2-t1, t2-t0))
        if len(samples) > nsamples:
            LOG ('rpc delay', samples)
            samples = []

def main (args):
    if args.mode == 'server':
        root = DelayRoot()
        server = Server (root, ('', args.port))
    else:
        client = Client ((args.ip, args.port))
        proxy = client.get_proxy()
        coro.spawn (measure, proxy, args.delay, args.nsamples)

p = argparse.ArgumentParser (description="Test the RPC system.")
p.add_argument ('--mode'     , help='mode'                  , choices=['server' , 'client'])
p.add_argument ('--port'     , help='server port'           , default=9999)
p.add_argument ('--ip'       , help='server ip address'     , default='127.0.0.1')
p.add_argument ('--delay'    , help='time between samples'  , default=7         , type=int, metavar="SECS")
p.add_argument ('--nsamples' , help='samples per log entry' , default=10        , type=int, metavar="N")

coro.spawn (main, p.parse_args())
coro.event_loop()
